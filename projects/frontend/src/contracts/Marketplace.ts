/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"Marketplace","structs":{},"methods":[{"name":"createApplication","args":[{"name":"assetId","type":"asset"},{"name":"listingPrice","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"setPrice","args":[{"name":"listingPrice","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"optInToAsset","args":[{"name":"mbrPay","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"buy","args":[{"name":"buyerTxn","type":"pay"},{"name":"quantity","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"hello","args":[{"name":"name","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":3,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"assetId":{"key":"YXNzZXRJZA==","keyType":"AVMString","valueType":"AVMUint64"},"listingPrice":{"key":"bGlzdGluZ1ByaWNl","keyType":"AVMString","valueType":"AVMUint64"},"lsitingPrice":{"key":"bHNpdGluZ1ByaWNl","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMubWFya2V0cGxhY2UuY29udHJhY3QuTWFya2V0cGxhY2UuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Marketplace contract
 */
export type MarketplaceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(asset,uint64)void': {
      assetId: bigint
      listingPrice: bigint | number
    }
    'setPrice(uint64)void': {
      listingPrice: bigint | number
    }
    'optInToAsset(pay)void': {
      mbrPay: AppMethodCallTransactionArgument
    }
    'buy(pay,uint64)void': {
      buyerTxn: AppMethodCallTransactionArgument
      quantity: bigint | number
    }
    'deleteApplication()void': Record<string, never>
    'hello(string)string': {
      name: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(asset,uint64)void': [assetId: bigint, listingPrice: bigint | number]
    'setPrice(uint64)void': [listingPrice: bigint | number]
    'optInToAsset(pay)void': [mbrPay: AppMethodCallTransactionArgument]
    'buy(pay,uint64)void': [buyerTxn: AppMethodCallTransactionArgument, quantity: bigint | number]
    'deleteApplication()void': []
    'hello(string)string': [name: string]
  }
}

/**
 * The return type for each method
 */
export type MarketplaceReturns = {
  'createApplication(asset,uint64)void': void
  'setPrice(uint64)void': void
  'optInToAsset(pay)void': void
  'buy(pay,uint64)void': void
  'deleteApplication()void': void
  'hello(string)string': string
}

/**
 * Defines the types of available calls and state of the Marketplace smart contract.
 */
export type MarketplaceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(asset,uint64)void' | 'createApplication', {
      argsObj: MarketplaceArgs['obj']['createApplication(asset,uint64)void']
      argsTuple: MarketplaceArgs['tuple']['createApplication(asset,uint64)void']
      returns: MarketplaceReturns['createApplication(asset,uint64)void']
    }>
    & Record<'setPrice(uint64)void' | 'setPrice', {
      argsObj: MarketplaceArgs['obj']['setPrice(uint64)void']
      argsTuple: MarketplaceArgs['tuple']['setPrice(uint64)void']
      returns: MarketplaceReturns['setPrice(uint64)void']
    }>
    & Record<'optInToAsset(pay)void' | 'optInToAsset', {
      argsObj: MarketplaceArgs['obj']['optInToAsset(pay)void']
      argsTuple: MarketplaceArgs['tuple']['optInToAsset(pay)void']
      returns: MarketplaceReturns['optInToAsset(pay)void']
    }>
    & Record<'buy(pay,uint64)void' | 'buy', {
      argsObj: MarketplaceArgs['obj']['buy(pay,uint64)void']
      argsTuple: MarketplaceArgs['tuple']['buy(pay,uint64)void']
      returns: MarketplaceReturns['buy(pay,uint64)void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: MarketplaceArgs['obj']['deleteApplication()void']
      argsTuple: MarketplaceArgs['tuple']['deleteApplication()void']
      returns: MarketplaceReturns['deleteApplication()void']
    }>
    & Record<'hello(string)string' | 'hello', {
      argsObj: MarketplaceArgs['obj']['hello(string)string']
      argsTuple: MarketplaceArgs['tuple']['hello(string)string']
      returns: MarketplaceReturns['hello(string)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetId: bigint
        listingPrice: bigint
        lsitingPrice: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type MarketplaceSignatures = keyof MarketplaceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MarketplaceNonVoidMethodSignatures = keyof MarketplaceTypes['methods'] extends infer T ? T extends keyof MarketplaceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Marketplace smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MarketplaceSignatures> = MarketplaceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Marketplace smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MarketplaceSignatures> = MarketplaceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = MarketplaceTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type MarketplaceCreateCallParams =
  | Expand<CallParams<MarketplaceArgs['obj']['createApplication(asset,uint64)void'] | MarketplaceArgs['tuple']['createApplication(asset,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<MarketplaceArgs['obj']['createApplication(asset,uint64)void'] | MarketplaceArgs['tuple']['createApplication(asset,uint64)void']> & {method: 'createApplication(asset,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type MarketplaceDeleteCallParams =
  | Expand<CallParams<MarketplaceArgs['obj']['deleteApplication()void'] | MarketplaceArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<MarketplaceArgs['obj']['deleteApplication()void'] | MarketplaceArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type MarketplaceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MarketplaceCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: MarketplaceDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Marketplace smart contract
 */
export abstract class MarketplaceParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends MarketplaceCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(asset,uint64)void':
            return MarketplaceParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Marketplace smart contract using the createApplication(asset,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<MarketplaceArgs['obj']['createApplication(asset,uint64)void'] | MarketplaceArgs['tuple']['createApplication(asset,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(asset,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.listingPrice],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends MarketplaceDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return MarketplaceParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the Marketplace smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<MarketplaceArgs['obj']['deleteApplication()void'] | MarketplaceArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setPrice(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setPrice(params: CallParams<MarketplaceArgs['obj']['setPrice(uint64)void'] | MarketplaceArgs['tuple']['setPrice(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setPrice(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.listingPrice],
    }
  }
  /**
   * Constructs a no op call for the optInToAsset(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<MarketplaceArgs['obj']['optInToAsset(pay)void'] | MarketplaceArgs['tuple']['optInToAsset(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToAsset(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the buy(pay,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buy(params: CallParams<MarketplaceArgs['obj']['buy(pay,uint64)void'] | MarketplaceArgs['tuple']['buy(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyerTxn, params.args.quantity],
    }
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<MarketplaceArgs['obj']['hello(string)string'] | MarketplaceArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Marketplace smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MarketplaceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MarketplaceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MarketplaceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MarketplaceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Marketplace smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MarketplaceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? MarketplaceParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (MarketplaceCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? MarketplaceParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (MarketplaceDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new MarketplaceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Marketplace smart contract using the createApplication(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<MarketplaceArgs['obj']['createApplication(asset,uint64)void'] | MarketplaceArgs['tuple']['createApplication(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(MarketplaceParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the Marketplace smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<MarketplaceArgs['obj']['deleteApplication()void'] | MarketplaceArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(MarketplaceParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Marketplace smart contract using the createApplication(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<MarketplaceArgs['obj']['createApplication(asset,uint64)void'] | MarketplaceArgs['tuple']['createApplication(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(MarketplaceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Marketplace smart contract using an ABI method call using the createApplication(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<MarketplaceArgs['obj']['createApplication(asset,uint64)void'] | MarketplaceArgs['tuple']['createApplication(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(MarketplaceParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | MarketplaceReturns['createApplication(asset,uint64)void']) }, appClient: new MarketplaceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Marketplace smart contract
 */
export class MarketplaceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MarketplaceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Marketplace app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MarketplaceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MarketplaceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MarketplaceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MarketplaceClient> {
    return new MarketplaceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MarketplaceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MarketplaceClient> {
    return new MarketplaceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Marketplace smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<MarketplaceArgs['obj']['deleteApplication()void'] | MarketplaceArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(MarketplaceParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Marketplace smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Marketplace smart contract using the `setPrice(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setPrice: (params: CallParams<MarketplaceArgs['obj']['setPrice(uint64)void'] | MarketplaceArgs['tuple']['setPrice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MarketplaceParamsFactory.setPrice(params))
    },

    /**
     * Makes a call to the Marketplace smart contract using the `optInToAsset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<MarketplaceArgs['obj']['optInToAsset(pay)void'] | MarketplaceArgs['tuple']['optInToAsset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MarketplaceParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the Marketplace smart contract using the `buy(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buy: (params: CallParams<MarketplaceArgs['obj']['buy(pay,uint64)void'] | MarketplaceArgs['tuple']['buy(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MarketplaceParamsFactory.buy(params))
    },

    /**
     * Makes a call to the Marketplace smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<MarketplaceArgs['obj']['hello(string)string'] | MarketplaceArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MarketplaceParamsFactory.hello(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Marketplace smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<MarketplaceArgs['obj']['deleteApplication()void'] | MarketplaceArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(MarketplaceParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Marketplace smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Marketplace smart contract using the `setPrice(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setPrice: (params: CallParams<MarketplaceArgs['obj']['setPrice(uint64)void'] | MarketplaceArgs['tuple']['setPrice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MarketplaceParamsFactory.setPrice(params))
    },

    /**
     * Makes a call to the Marketplace smart contract using the `optInToAsset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<MarketplaceArgs['obj']['optInToAsset(pay)void'] | MarketplaceArgs['tuple']['optInToAsset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MarketplaceParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the Marketplace smart contract using the `buy(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buy: (params: CallParams<MarketplaceArgs['obj']['buy(pay,uint64)void'] | MarketplaceArgs['tuple']['buy(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MarketplaceParamsFactory.buy(params))
    },

    /**
     * Makes a call to the Marketplace smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<MarketplaceArgs['obj']['hello(string)string'] | MarketplaceArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MarketplaceParamsFactory.hello(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Marketplace smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<MarketplaceArgs['obj']['deleteApplication()void'] | MarketplaceArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(MarketplaceParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | MarketplaceReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Marketplace smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Marketplace smart contract using the `setPrice(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setPrice: async (params: CallParams<MarketplaceArgs['obj']['setPrice(uint64)void'] | MarketplaceArgs['tuple']['setPrice(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MarketplaceParamsFactory.setPrice(params))
      return {...result, return: result.return as unknown as (undefined | MarketplaceReturns['setPrice(uint64)void'])}
    },

    /**
     * Makes a call to the Marketplace smart contract using the `optInToAsset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<MarketplaceArgs['obj']['optInToAsset(pay)void'] | MarketplaceArgs['tuple']['optInToAsset(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MarketplaceParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | MarketplaceReturns['optInToAsset(pay)void'])}
    },

    /**
     * Makes a call to the Marketplace smart contract using the `buy(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buy: async (params: CallParams<MarketplaceArgs['obj']['buy(pay,uint64)void'] | MarketplaceArgs['tuple']['buy(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MarketplaceParamsFactory.buy(params))
      return {...result, return: result.return as unknown as (undefined | MarketplaceReturns['buy(pay,uint64)void'])}
    },

    /**
     * Makes a call to the Marketplace smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<MarketplaceArgs['obj']['hello(string)string'] | MarketplaceArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MarketplaceParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | MarketplaceReturns['hello(string)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MarketplaceClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Marketplace app
   */
  state = {
    /**
     * Methods to access global state for the current Marketplace app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetId: result.assetId,
          listingPrice: result.listingPrice,
          lsitingPrice: result.lsitingPrice,
        }
      },
      /**
       * Get the current value of the assetId key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetId")) as bigint | undefined },
      /**
       * Get the current value of the listingPrice key in global state
       */
      listingPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("listingPrice")) as bigint | undefined },
      /**
       * Get the current value of the lsitingPrice key in global state
       */
      lsitingPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lsitingPrice")) as bigint | undefined },
    },
  }

  public newGroup(): MarketplaceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a setPrice(uint64)void method call against the Marketplace contract
       */
      setPrice(params: CallParams<MarketplaceArgs['obj']['setPrice(uint64)void'] | MarketplaceArgs['tuple']['setPrice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setPrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optInToAsset(pay)void method call against the Marketplace contract
       */
      optInToAsset(params: CallParams<MarketplaceArgs['obj']['optInToAsset(pay)void'] | MarketplaceArgs['tuple']['optInToAsset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buy(pay,uint64)void method call against the Marketplace contract
       */
      buy(params: CallParams<MarketplaceArgs['obj']['buy(pay,uint64)void'] | MarketplaceArgs['tuple']['buy(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buy(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a hello(string)string method call against the Marketplace contract
       */
      hello(params: CallParams<MarketplaceArgs['obj']['hello(string)string'] | MarketplaceArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<MarketplaceArgs['obj']['deleteApplication()void'] | MarketplaceArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Marketplace contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MarketplaceComposer
  }
}
export type MarketplaceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setPrice(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPrice(params?: CallParams<MarketplaceArgs['obj']['setPrice(uint64)void'] | MarketplaceArgs['tuple']['setPrice(uint64)void']>): MarketplaceComposer<[...TReturns, MarketplaceReturns['setPrice(uint64)void'] | undefined]>

  /**
   * Calls the optInToAsset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<MarketplaceArgs['obj']['optInToAsset(pay)void'] | MarketplaceArgs['tuple']['optInToAsset(pay)void']>): MarketplaceComposer<[...TReturns, MarketplaceReturns['optInToAsset(pay)void'] | undefined]>

  /**
   * Calls the buy(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buy(params?: CallParams<MarketplaceArgs['obj']['buy(pay,uint64)void'] | MarketplaceArgs['tuple']['buy(pay,uint64)void']>): MarketplaceComposer<[...TReturns, MarketplaceReturns['buy(pay,uint64)void'] | undefined]>

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<MarketplaceArgs['obj']['hello(string)string'] | MarketplaceArgs['tuple']['hello(string)string']>): MarketplaceComposer<[...TReturns, MarketplaceReturns['hello(string)string'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Marketplace smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<MarketplaceArgs['obj']['deleteApplication()void'] | MarketplaceArgs['tuple']['deleteApplication()void']>): MarketplaceComposer<[...TReturns, MarketplaceReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Marketplace smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MarketplaceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MarketplaceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MarketplaceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MarketplaceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MarketplaceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MarketplaceComposerResults<TReturns>>
}
export type MarketplaceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

